import cv2 as cv
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from skimage.feature import peak_local_max
from skimage.segmentation import watershed
from scipy import ndimage as ndi

# Load SEM image
img = cv.imread("opencv-course-master/Resources/Photos/P250617G 12h.tiff")
img = img[:-77, :]
output_img = img.copy()
gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

# Otsu thresholding and erosion to enhance separation
ret, binary = cv.threshold(gray, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)
kernel = np.ones((3, 3), np.uint8)
binary = cv.morphologyEx(binary, cv.MORPH_OPEN, kernel, iterations=2)
binary = cv.erode(binary, kernel, iterations=1)

# Distance transform
dist_transform = cv.distanceTransform(binary, cv.DIST_L2, 5)

# More aggressive peak detection
coordinates = peak_local_max(dist_transform, min_distance=7, labels=binary)
local_max_mask = np.zeros_like(dist_transform, dtype=bool)
local_max_mask[tuple(coordinates.T)] = True
markers = ndi.label(local_max_mask)[0]

for y, x in coordinates:
    cv.circle(img, (x, y), 2, (255, 0, 0), -1) 

# Label markers
markers, _ = ndi.label(local_max_mask)

# Apply watershed
labels = watershed(-dist_transform, markers, mask=binary)

# Convert watershed labels to uint8
labels_uint8 = np.uint8(labels)
contours, _ = cv.findContours(labels_uint8, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE)
print(f'Contours found after Watershed: {len(contours)}')

# Filter small contours
filtered_contours = [cnt for cnt in contours if cv.contourArea(cnt) > 1.5]
print(f'Contours after filtering: {len(filtered_contours)}')

# Visualization
blank = np.zeros(img.shape, dtype="uint8")
cv.drawContours(blank, filtered_contours, -1, (0, 0, 255), 1)
cv.imshow("Filtered Contours", blank)
cv.waitKey(0)

# Feature extraction
pixel_to_micrometer = 0.2747
particle_dir = "P250617G 12h_particle"
fine_dir = "P250617G 12hfine"
agg_dir = "P250617G 12h_agg"
os.makedirs(particle_dir, exist_ok=True)
os.makedirs(fine_dir, exist_ok=True)
os.makedirs(agg_dir, exist_ok=True)
# Helper function

def compute_curvature(contour):
    if len(contour) < 5:
        return 0
    contour = contour[:, 0, :]
    dx_dt = np.gradient(contour[:, 0])
    dy_dt = np.gradient(contour[:, 1])
    d2x_dt2 = np.gradient(dx_dt)
    d2y_dt2 = np.gradient(dy_dt)
    denominator = (dx_dt**2 + dy_dt**2)**(3/2)
    epsilon = 1e-6
    curvature = np.abs(d2x_dt2 * dy_dt - d2y_dt2 * dx_dt) / (denominator + epsilon)
    return np.mean(curvature)

def count_local_maxima(mask):
    dist = cv.distanceTransform(mask, cv.DIST_L2, 5)
    peaks = peak_local_max(dist, min_distance=5, labels=mask)
    return len(peaks)
# Feature extraction containers
final_contours = []
data_particles, data_fines, data_agglomeration = [], [], []
final_contours, final_fine_contours, final_agglomeration_contours = [], [], []
seen_centroids = []
seen_features = set()
for i, cnt in enumerate(filtered_contours):
    x, y, w, h = cv.boundingRect(cnt)
    if x <= 5 or y <= 5 or (x + w) >= (img.shape[1] - 5) or (y + h) >= (img.shape[0] - 5):
        continue

    area = cv.contourArea(cnt) * (pixel_to_micrometer ** 2)
    perimeter = cv.arcLength(cnt, True) * pixel_to_micrometer
    aspect_ratio = w / h if h != 0 else 0
    circularity = (4 * np.pi * area) / (perimeter ** 2) if perimeter != 0 else 0
    solidity = area / (w * h * (pixel_to_micrometer ** 2)) if (w * h) != 0 else 0
    equivalent_diameter = np.sqrt(4 * area / np.pi)
    # _, _, angle = cv.minAreaRect(cnt)
    _, (MA, ma), angle = cv.fitEllipse(cnt) if len(cnt) >= 5 else ((0, 0), (0, 0), 0)
    elongation = ma / MA if MA > 0 else 0
    curvature = compute_curvature(cnt)
    
    M = cv.moments(cnt)
    centroid_x = int(M["m10"] / M["m00"]) if M["m00"] != 0 else x + w // 2
    centroid_y = int(M["m01"] / M["m00"]) if M["m00"] != 0 else y + h // 2

    centroid = (centroid_x, centroid_y)
    if any(np.linalg.norm(np.array(centroid) - np.array(c)) < 5 for c in seen_centroids):
        continue
    seen_centroids.append(centroid)

    feature_signature = (round(area, 2), round(perimeter, 2))
    if feature_signature in seen_features:
        continue
    seen_features.add(feature_signature)

    mask = np.zeros(gray.shape, dtype=np.uint8)
    cv.drawContours(mask, [cnt], -1, 255, -1)
    local_max_count = count_local_maxima(mask)
    feature_crop = img[y:y+h, x:x+w].copy()

    row_data = [area, perimeter, aspect_ratio, circularity, solidity,
                equivalent_diameter, angle, curvature, elongation, local_max_count,
                centroid_x, centroid_y, x, y, w, h]

    if 35.27< area < 110 and circularity >= 0.75:
        feature_filename = os.path.join(particle_dir, f"particle_feature_{i}.png")
        data_particles.append(row_data + [feature_filename])
        cv.drawContours(feature_crop, [cnt - [x, y]], -1, (0, 0, 255), 1)
        cv.imwrite(feature_filename, feature_crop)
        final_contours.append(cnt)
    elif 2 <= area < 40 and equivalent_diameter < 7 and circularity > 0.2:
        feature_filename = os.path.join(fine_dir, f"fine_feature_{i}.png")
        data_fines.append(row_data + [feature_filename])
        cv.drawContours(feature_crop, [cnt - [x, y]], -1, (0, 255, 0), 1)
        cv.imwrite(feature_filename, feature_crop)
        final_fine_contours.append(cnt)
    elif area > 70 and (equivalent_diameter > 9.8 or circularity < 0.75 or curvature > 2  or local_max_count > 1):
          feature_filename = os.path.join(agg_dir, f"Agglomeration_feature_{i}.png")
          data_agglomeration.append(row_data + [feature_filename])
          cv.drawContours(feature_crop, [cnt - [x, y]], -1, (255, 0, 0), 1)
          cv.imwrite(feature_filename, feature_crop)    
          final_agglomeration_contours.append(cnt)
# Save features
columns = ["Area (µm²)", "Perimeter (µm)", "Aspect Ratio", "Circularity",
           "Solidity", "Diameter (µm)", "Orientation (°)", "Curvature",
           "Elongation", "Local Max Count", "Centroid X", "Centroid Y", "X", "Y", "Width", "Height", "Feature Image"]

pd.DataFrame(data_particles, columns=columns).to_csv("P250617G 12h_particle.csv", index=False)
pd.DataFrame(data_fines, columns=columns).to_csv("P250617G 12h_fine.csv", index=False)
pd.DataFrame(data_agglomeration, columns=columns).to_csv("P250617G 12h_agg.csv", index=False)

print(f"Extracted {len(data_particles)} particle features and saved images.")
print(f"Extracted {len(data_fines)} fine particle features and saved images.")
print(f"Extracted {len(data_agglomeration)} agglomeration particle features and saved images.")
print(f"Fine ratio is {len(data_fines)/(len(data_particles)+len(data_fines)+len(data_agglomeration))}.")
print(f"Agglomeration ratio is {len(data_agglomeration)/(len(data_particles)+len(data_fines)+len(data_agglomeration))}.")
print("CSV saved as 'P250617G 12h_particle.csv'")
print("Fine particle CSV saved as 'P250617G 12h_fineS.csv'")
print("Agglomeration particle CSV saved as 'P250617G 12h_agg.csv'")

# Draw overlays
cv.drawContours(output_img, final_fine_contours, -1, (0, 0, 255), 2)
plt.figure(figsize=(10, 6))
plt.imshow(cv.cvtColor(output_img, cv.COLOR_BGR2RGB))
plt.title("P250617G 12h Filtered fine Contours Overlayed on SEM Image")
plt.axis("off")
plt.show()

cv.drawContours(output_img, final_contours, -1, (0, 255, 0), 2)
plt.figure(figsize=(10, 6))
plt.imshow(cv.cvtColor(output_img, cv.COLOR_BGR2RGB))
plt.title("Filtered Particle & fine Contours Overlayed on SEM Image")
plt.axis("off")
plt.show()

cv.drawContours(output_img, final_agglomeration_contours, -1, (255, 0, 0), 2)
plt.figure(figsize=(10, 6))
plt.imshow(cv.cvtColor(output_img, cv.COLOR_BGR2RGB))
plt.title("Filtered Particle & fine Contours Overlayed on SEM Image")
plt.axis("off")
plt.show()


# Draw final filtered contours
cv.drawContours(img, filtered_contours, -1, (0, 255, 0), 2)
plt.figure(figsize=(10, 6))
plt.imshow(cv.cvtColor(img, cv.COLOR_BGR2RGB))
plt.title("P250617G 12h Extracted Particles Features Overlayed on Original Contours")
plt.axis("off")
plt.show()
